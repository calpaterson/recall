#!/usr/bin/env bash
set -e
set -x

OPS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BUILD_DIR=$OPS_DIR/build.d
PROJECT_ROOT=$OPS_DIR/..

create_build_directory () {
    if [[ -d $BUILD_DIR ]]
    then
	rm -rf $BUILD_DIR
    fi
    cp -Rv $OPS_DIR/debian/ $BUILD_DIR
}

set_version () {
    if [ $BUILD_NUMBER ]
    then
	VERSION=$BUILD_NUMBER
    else
	VERSION=0-DEV
    fi
    sed -i "s/0-UNKNOWN/${VERSION}/" $OPS_DIR/build.d/DEBIAN/control
}

build_bootstrap_if_needed () {
    if [[ ! -f $PROJECT_ROOT/www/third-party/bootstrap/css/bootstrap.css ]]
    then
	BOOTSTRAP_DIR=$PROJECT_ROOT/www/third-party/bootstrap/
	mkdir $BOOTSTRAP_DIR/css
	lessc $BOOTSTRAP_DIR/less/bootstrap.less > $BOOTSTRAP_DIR/css/bootstrap.css
	lessc $BOOTSTRAP_DIR/less/responsive.less > $BOOTSTRAP_DIR/css/bootstrap-responsive.css
    fi
}

build_jquery_if_needed () {
    JQUERY_DIR=$PROJECT_ROOT/www/third-party/jquery
    if [[ ! -f $JQUERY_DIR/dist/jquery.js ]]
    then
	cd $JQUERY_DIR
	make
	cd $PROJECT_ROOT
    fi
}

insert_web_resources () {
    build_bootstrap_if_needed
    build_jquery_if_needed
    cp -R $PROJECT_ROOT/www $BUILD_DIR/usr/share/recall/www/
    echo $VERSION > $BUILD_DIR/usr/share/recall/www/version
}

insert_python_resources () {
    cp -R $PROJECT_ROOT/src $BUILD_DIR/usr/share/recall/
}
    
clean_out_temporary_files () {
    find $OPS_DIR/debian/ -name '*~' -exec rm '{}' ';'
}

build_artefact () {
    fakeroot dpkg-deb --build $BUILD_DIR $OPS_DIR/artefacts/recall.deb
    dpkg-name $OPS_DIR/artefacts/recall.deb
}

insert_documentation () {
    cp $PROJECT_ROOT/LICENCE $BUILD_DIR/usr/share/doc/recall/copyright
    # touch $BUILD_DIR/usr/share/doc/recall/changelog.Debian
    # gzip --best $BUILD_DIR/usr/share/doc/recall/changelog.Debian
}

push_tags_if_on_ci () {
    if [[ $BUILD_NUMBER ]]
    then
	git push --tags
    fi
}

create_build_directory
set_version
insert_web_resources
insert_python_resources
insert_documentation
clean_out_temporary_files
build_artefact
push_tags_if_on_ci