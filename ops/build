#!/usr/bin/env bash
set -e
set -x

OPS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BUILD_DIR=$OPS_DIR/build.d
PROJECT_ROOT=$OPS_DIR/..

create_build_directory () {
    if [[ -d $BUILD_DIR ]]
    then
	rm -rf $BUILD_DIR
    fi
    cp -Rv $OPS_DIR/debian/ $BUILD_DIR
}

set_version () {
    LAST_VERSION=`git tag --list | grep -v jenkins | sort -rV | head -n 1`
    export VERSION=`expr $LAST_VERSION + 1`
    git tag $VERSION
    sed -i "s/0-UNKNOWN/${VERSION}/" $OPS_DIR/build.d/DEBIAN/control
}

insert_python_resources () {
    cp -R $PROJECT_ROOT/src $BUILD_DIR/usr/share/recall/
}

insert_python_bundle () {
    if [[ ! -f $OPS_DIR/artefacts/requirements.md5 ]]
    then
	touch $OPS_DIR/artefacts/requirements.md5
    fi
    EXPECTED=`md5sum $PROJECT_ROOT/requirements`
    SUM=`cat $OPS_DIR/artefacts/requirements.md5`
    if [[ $EXPECTED != $SUM ]]
    then
	pip bundle $BUILD_DIR/usr/share/recall/bundle.zip -r $PROJECT_ROOT/requirements
	cp $BUILD_DIR/usr/share/recall/bundle.zip $OPS_DIR/artefacts/bundle.zip
	md5sum $PROJECT_ROOT/requirements > $OPS_DIR/artefacts/requirements.md5
    else
	echo "REUSING OLD BUNDLE"
	cp $OPS_DIR/artefacts/bundle.zip $BUILD_DIR/usr/share/recall/bundle.zip
    fi
}
   
clean_out_temporary_files () {
    find $OPS_DIR/debian/ -name '*~' -exec rm '{}' ';'
}

remove_gitignores () {
    rm `find $BUILD_DIR -name '*gitignore*'`
}

build_artefact () {
    if [[ -f $OPS_DIR/artefacts/recall.deb ]]
    then
	rm $OPS_DIR/artefacts/recall.deb
    fi
    fakeroot dpkg-deb --build $BUILD_DIR $OPS_DIR/artefacts/recall.deb
    dpkg-name $OPS_DIR/artefacts/recall.deb
}

push_tags_if_on_ci () {
    # git push --tags
    echo 'Not pushing ci tags'
}

create_build_directory
set_version
insert_python_resources
insert_python_bundle
clean_out_temporary_files
remove_gitignores
build_artefact
push_tags_if_on_ci